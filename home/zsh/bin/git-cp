#!/bin/sh

# Git branch copy

set -e

# confirm current dir is a git repo
if ! git rev-parse --abbrev-ref HEAD >/dev/null 2>&1; then
  echo "Error: Not a git repository."
  exit 1
fi

if [ -z "$1" ]; then
  echo missing params
  exit 1
fi

# store current branch so we can switch back at the end
CURRENT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

if [ -z "$2" ]; then
  # if second param is not provided, use the current branch as source and param 1 as target
  SOURCE_BRANCH_NAME=$CURRENT_BRANCH_NAME
  TARGET_BRANCH_NAME=$1
else
  SOURCE_BRANCH_NAME=$1
  TARGET_BRANCH_NAME=$2
fi

git fetch origin

if ! git show-ref --verify --quiet refs/heads/$SOURCE_BRANCH_NAME; then
  echo "Error: Branch '$SOURCE_BRANCH_NAME' does not exist locally."
  exit 1
fi

if ! git ls-remote --exit-code --heads origin $SOURCE_BRANCH_NAME; then
  echo "Error: Branch '$SOURCE_BRANCH_NAME' does not exist on the remote."
  exit 1
fi

if git show-ref --verify --quiet refs/heads/$TARGET_BRANCH_NAME; then
  echo "Error: Branch '$TARGET_BRANCH_NAME' already exists locally."
  exit 1
fi

if git ls-remote --exit-code --heads origin $TARGET_BRANCH_NAME; then
  echo "Error: Branch '$TARGET_BRANCH_NAME' already exists on the remote."
  exit 1
fi

echo "Copying $SOURCE_BRANCH_NAME as $TARGET_BRANCH_NAME."

git checkout $SOURCE_BRANCH_NAME
git pull

git checkout -b $TARGET_BRANCH_NAME
git push -u origin $TARGET_BRANCH_NAME

# switch branch to the original current branch
git checkout $CURRENT_BRANCH_NAME

git fetch --all --prune

