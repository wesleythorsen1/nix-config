{
  // General editor settings
  "editor.formatOnSave": true,
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "editor.inlineSuggest.enabled": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "window.title": "${rootName}",
  "debug.onTaskErrors": "debugAnyway",
  // Language-specific editor settings
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "eslint.enable": true,
    "eslint.format.enable": true,
    "eslint.useFlatConfig": true,
    "prettier.enable": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "eslint.enable": true,
    "eslint.format.enable": true,
    "eslint.useFlatConfig": true,
    "prettier.enable": true
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "eslint.enable": true,
    "eslint.format.enable": true,
    "eslint.useFlatConfig": true,
    "prettier.enable": true
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[csharp]": {
    "editor.tabSize": 4
  },
  // Language-scoped VSCode settings (file management, imports, etc.)
  "javascript.updateImportsOnFileMove.enabled": "always",
  "debug.javascript.autoAttachFilter": "smart",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.disableAutomaticTypeAcquisition": true,
  "yaml.schemas": {
    "/Users/wes/.vscode/extensions/continue.continue/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.42-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.44-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.45-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.47-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.48-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ],
    "/Users/wes/.vscode/extensions/continue.continue-1.1.49-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ]
  },
  "yaml.customTags": [
    "!And",
    "!And sequence",
    "!If",
    "!If sequence",
    "!Not",
    "!Not sequence",
    "!Equals",
    "!Equals sequence",
    "!Or",
    "!Or sequence",
    "!FindInMap",
    "!FindInMap sequence",
    "!Base64",
    "!Join",
    "!Join sequence",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!Sub sequence",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!ImportValue sequence",
    "!Select",
    "!Select sequence",
    "!Split",
    "!Split sequence"
  ],
  "csharp.experimental.debug.hotReload": true,
  // Extension-wide/global settings (not language-specific)
  "jest.runMode": "on-demand",
  "jest.coverageColors": {
    "covered": "rgba(9, 156, 65, 0.4)",
    "uncovered": "rgba(121, 31, 10, 0.4)",
    "partially-covered": "rgba(235, 198, 52, 0.4)"
  },
  "jest.coverageFormatter": "GutterFormatter",
  "omnisharp.enableAsyncCompletion": true,
  "vs-kubernetes": {
    "vscode-kubernetes.minikube-path-mac": "/Users/wesley/.vs-kubernetes/tools/minikube/darwin-arm64/minikube"
  },
  "openapi.defaultPreviewRenderer": "redoc",
  "cSpell.enabled": true,
  "cSpell.userWords": [
    "ashby",
    "atlascode",
    "awsxray",
    "bamboohr",
    "bodyparser",
    "bussin",
    "cass",
    "Chandan",
    "codeartifact",
    "converages",
    "crackbookpro",
    "deepgram",
    "dotenv",
    "dropoff",
    "esbenp",
    "filemode",
    "healthcheck",
    "Kaushik",
    "kinetik",
    "ldclient",
    "luxon",
    "Meenal",
    "mytake",
    "nixos",
    "nixpkgs",
    "nodemon",
    "omnisharp",
    "ondemand",
    "pkgs",
    "premajor",
    "preminor",
    "prepatch",
    "rgba",
    "thinkpad",
    "thorsen",
    "tsyringe",
    "typebox",
    "typemoq",
    "venv",
    "wesleythorsen",
    "wezterm",
    "willcall",
    "Yaniv",
    "yeet"
  ],
  "cSpell.customDictionaries": {},
  "continue.showInlineTip": false,
  "extensions.ignoreRecommendations": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "html",
    "typescript",
    "typescriptreact"
  ],
  "workbench.editor.enablePreview": false,
  "todo-tree.tree.autoRefresh": true,
  "todo-tree.highlights.customHighlight": {
    "WARN": {
      "foreground": "#FFFFFF",
      "background": "#FF0000",
      "iconColour": "#FF0000",
      "icon": "alert",
      "type": "text"
    },
    "TODO": {
      "foreground": "#000000",
      "background": "#00FF00",
      "iconColour": "#00FF00",
      "icon": "check",
      "type": "text"
    },
    "FIXME": {
      "foreground": "#FFFFFF",
      "background": "#FF0000",
      "iconColour": "#FF0000",
      "icon": "flame"
    },
    "REVIEW": {
      "foreground": "#000000",
      "background": "#00FFFF",
      "iconColour": "#00AAFF",
      "icon": "eye"
    },
    "HACK": {
      "foreground": "#000000",
      "background": "#FFA500",
      "iconColour": "#FFA500",
      "icon": "alert"
    },
    "REF": {
      "foreground": "#000000",
      "background": "#888888",
      "iconColour": "#888888",
      "icon": "link",
      "type": "tag"
    }
  },
  "todo-tree.highlights.defaultHighlight": {
    "type": "text-and-comment"
  },
  "todo-tree.general.tags": [
    "TODO",
    "FIXME",
    "REVIEW",
    "HACK",
    "REF",
    "WARN"
  ],
  "security.workspace.trust.untrustedFiles": "open",
  "nix.enableLanguageServer": true,
  "nix.serverPath": "nixd", // or "nil"
  // LSP config can be passed via the ``nix.serverSettings.{lsp}`` as shown below.
  "nix.serverSettings": {
    // check https://github.com/oxalica/nil/blob/main/docs/configuration.md for all options available
    "nil": {
      // "diagnostics": {
      //  "ignored": ["unused_binding", "unused_with"],
      // },
      "formatting": {
        "command": [
          "nixfmt"
        ]
      }
    },
    // check https://github.com/nix-community/nixd/blob/main/nixd/docs/configuration.md for all nixd config
    "nixd": {
      "formatting": {
        "command": [
          "nixfmt"
        ]
      }
      // "options": {
      //   // By default, this entry will be read from `import <nixpkgs> { }`.
      //   // You can write arbitrary Nix expressions here, to produce valid "options" declaration result.
      //   // Tip: for flake-based configuration, utilize `builtins.getFlake`
      //   "nixos": {
      //     "expr": "(builtins.getFlake \"/absolute/path/to/flake\").nixosConfigurations.<name>.options",
      //   },
      //   "home-manager": {
      //     "expr": "(builtins.getFlake \"/absolute/path/to/flake\").homeConfigurations.<name>.options",
      //   },
      //   // Tip: use ${workspaceFolder} variable to define path
      //   "nix-darwin": {
      //     "expr": "(builtins.getFlake \"${workspaceFolder}/path/to/flake\").darwinConfigurations.<name>.options",
      //   },
      // },
    }
  }
}